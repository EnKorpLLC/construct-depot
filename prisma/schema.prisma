generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @default(user)
  orders    Order[]
  products  Product[]
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Float
  inventory       Int
  supplierId      String
  supplier        User          @relation(fields: [supplierId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  OrderItem       OrderItem[]
  isSystemProduct Boolean       @default(false)
  minOrderQuantity Int          @default(1)
  priceBrackets   PriceBracket[]
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  totalAmount  Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  poolDeadline DateTime?
  poolGroupId  String?
  poolProgress Float?
  status       OrderStatus @default(PENDING)
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  payment      Payment?
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  currency      String        @default("USD")
  order         Order         @relation(fields: [orderId], references: [id])
}

model ServiceConfig {
  id           String    @id @default(cuid())
  service      String    @unique
  config       Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastVerified DateTime?
}

model PriceBracket {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  minQuantity Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  super_admin
  GENERAL_CONTRACTOR
  SUBCONTRACTOR
  user
  ADMIN
  SUPPLIER
}

enum OrderStatus {
  PENDING
  PROCESSING
  POOLING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  DRAFT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CAPTURED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CRYPTO
  OTHER
}
