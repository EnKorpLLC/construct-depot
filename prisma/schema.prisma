generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(CUSTOMER)
  company       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  payments      Payment[]  @relation("UserPayments")
  products      Product[]

  // Project relations
  contractorProjects Project[] @relation("ContractorProjects")
  submittedBids     Bid[]     @relation("SubcontractorBids")
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Float
  inventory       Int
  supplierId      String
  supplier        User          @relation(fields: [supplierId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  OrderItem       OrderItem[]
  isSystemProduct Boolean       @default(false)
  minOrderQuantity Int          @default(1)
  priceBrackets   PriceBracket[]
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  totalAmount  Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  poolDeadline DateTime?
  poolGroupId  String?
  poolProgress Float?
  status       OrderStatus @default(PENDING)
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  payment      Payment?
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  currency      String        @default("USD")
  order         Order         @relation(fields: [orderId], references: [id])
  user          User          @relation("UserPayments", fields: [userId], references: [id])
  userId        String

  @@index([userId])
}

model ServiceConfig {
  id           String    @id @default(cuid())
  service      String    @unique
  config       Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastVerified DateTime?
}

model PriceBracket {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  minQuantity Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id                 String   @id @default(cuid())
  title             String
  description       String
  location          String
  tradeType         String
  budget            Float
  startDate         DateTime
  duration          String
  requirements      String[]
  bidsDue           DateTime
  scope             String[]
  status            String   @default("open")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  generalContractorId String
  generalContractor   User     @relation("ContractorProjects", fields: [generalContractorId], references: [id])
  bids               Bid[]
  attachments        ProjectAttachment[]

  @@index([generalContractorId])
}

model Bid {
  id              String   @id @default(cuid())
  amount          Float
  notes           String?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  projectId       String
  project         Project  @relation(fields: [projectId], references: [id])
  subcontractorId String
  subcontractor   User     @relation("SubcontractorBids", fields: [subcontractorId], references: [id])

  @@index([projectId])
  @@index([subcontractorId])
}

model ProjectAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  super_admin
  GENERAL_CONTRACTOR
  SUBCONTRACTOR
  user
  ADMIN
  SUPPLIER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  POOLING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  DRAFT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CAPTURED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CRYPTO
  OTHER
}
