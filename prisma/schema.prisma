generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(user)
  company       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  payments      Payment[]  @relation("UserPayments")
  products      Product[]
  reviews       Review[]

  // Project relations
  contractorProjects Project[] @relation("ContractorProjects")
  submittedBids     Bid[]     @relation("SubcontractorBids")

  sentInvitations Invitation[] @relation("SentInvitations")

  companyVerification  CompanyVerification? @relation("CompanyVerification")
  createdTemplates    InvitationTemplate[] @relation("TemplateCreator")
  crawlerSchedules    CrawlerSchedule[]
  createdBatches     InvitationBatch[]    @relation("BatchCreator")

  priceAlerts   PriceAlert[]
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Float
  inventory       Int
  supplierId      String
  supplier        User          @relation(fields: [supplierId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  minOrderQuantity Int          @default(1)
  priceBrackets   PriceBracket[]
  priceHistory    PriceHistory[]
  images          ProductImage[]
  thumbnailUrl    String?
  specifications  Json?
  categoryId      String?
  category        Category?     @relation(fields: [categoryId], references: [id])
  relatedProducts Product[]     @relation("RelatedProducts")
  relatedTo       Product[]     @relation("RelatedProducts")
  reviews         Review[]
  variants        ProductVariant[]
  hasVariants     Boolean       @default(false)
  basePrice       Float?        // Base price for variant products
  priceAlerts     PriceAlert[]
  pools           Pool[]        // Added relation
  orders          Order[]       // Added relation
  isSystemProduct Boolean       @default(false)  // Added field

  @@index([categoryId])
  @@index([supplierId])
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([productId])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([parentId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Pool {
  id              String      @id @default(cuid())
  productId       String
  product         Product     @relation(fields: [productId], references: [id])
  targetQuantity  Int
  currentQuantity Int
  status          PoolStatus  @default(OPEN)
  expiresAt       DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orders          Order[]

  @@index([productId])
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  productId    String
  quantity     Int
  totalAmount  Float?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  status       OrderStatus @default(PENDING)
  user         User        @relation(fields: [userId], references: [id])
  product      Product     @relation(fields: [productId], references: [id])
  poolId       String?
  pool         Pool?       @relation(fields: [poolId], references: [id])
  payment      Payment?

  @@index([userId])
  @@index([productId])
  @@index([poolId])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  currency      String        @default("USD")
  order         Order         @relation(fields: [orderId], references: [id])
  user          User          @relation("UserPayments", fields: [userId], references: [id])
  userId        String

  @@index([userId])
}

model ServiceConfig {
  id           String    @id @default(cuid())
  service      String    @unique
  config       Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastVerified DateTime?
}

model PriceBracket {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  minQuantity Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id                 String   @id @default(cuid())
  title             String
  description       String
  location          String
  tradeType         String
  budget            Float
  startDate         DateTime
  duration          String
  requirements      String[]
  bidsDue           DateTime
  scope             String[]
  status            String   @default("open")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  generalContractorId String
  generalContractor   User     @relation("ContractorProjects", fields: [generalContractorId], references: [id])
  bids               Bid[]
  attachments        ProjectAttachment[]

  @@index([generalContractorId])
}

model Bid {
  id              String   @id @default(cuid())
  amount          Float
  notes           String?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  projectId       String
  project         Project  @relation(fields: [projectId], references: [id])
  subcontractorId String
  subcontractor   User     @relation("SubcontractorBids", fields: [subcontractorId], references: [id])

  @@index([projectId])
  @@index([subcontractorId])
}

model ProjectAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Invitation {
  id            String         @id @default(cuid())
  email         String
  role          Role
  token         String         @unique
  status        InviteStatus   @default(PENDING)
  expiresAt     DateTime
  invitedBy     User          @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  batchId    String?
  batch      InvitationBatch? @relation(fields: [batchId], references: [id])
  templateId String?
  template   InvitationTemplate? @relation(fields: [templateId], references: [id])
  
  @@index([invitedById])
  @@index([batchId])
  @@index([templateId])
}

model CrawlerSchedule {
  id          String    @id @default(cuid())
  url         String
  frequency   String    // daily, weekly, monthly
  lastCrawled DateTime?
  nextCrawl   DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  domain      String
  supplierId  String
  supplier    User      @relation(fields: [supplierId], references: [id])

  @@index([supplierId])
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  price     Float
  timestamp DateTime @default(now())
  source    String   // manual, crawler, system
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model InvitationTemplate {
  id              String   @id @default(cuid())
  name            String
  subject         String
  body            String
  role            Role
  onboardingSteps String[]
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation("TemplateCreator", fields: [createdById], references: [id])
  createdById     String
  invitations     Invitation[]
  batches         InvitationBatch[]

  @@index([createdById])
}

model CompanyVerification {
  id            String             @id @default(cuid())
  companyName   String
  registrationNo String?
  website       String?
  documents     VerificationDoc[]
  status        VerificationStatus @default(PENDING)
  notes         String?
  userId        String            @unique
  user          User              @relation("CompanyVerification", fields: [userId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  verifiedAt    DateTime?
  verifiedBy    String?

  @@index([userId])
}

model VerificationDoc {
  id            String             @id @default(cuid())
  name          String
  url           String
  type          String
  verificationId String
  verification  CompanyVerification @relation(fields: [verificationId], references: [id])
  uploadedAt    DateTime           @default(now())

  @@index([verificationId])
}

model CrawlerDomain {
  id        String   @id @default(cuid())
  domain    String   @unique
  isAllowed Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     String?
}

model InvitationBatch {
  id          String    @id @default(cuid())
  name        String
  invitations Invitation[]
  templateId  String?
  template    InvitationTemplate? @relation(fields: [templateId], references: [id])
  createdAt   DateTime  @default(now())
  createdBy   User      @relation("BatchCreator", fields: [createdById], references: [id])
  createdById String
  status      BatchStatus @default(PENDING)

  @@index([createdById])
  @@index([templateId])
}

model ProductVariant {
  id          String   @id @default(cuid())
  sku         String?  @unique
  price       Float
  inventory   Int      @default(0)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  options     ProductVariantOption[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  priceAlerts PriceAlert[]

  @@index([productId])
}

model ProductVariantOption {
  id        String   @id @default(cuid())
  name      String   // e.g., "Size", "Color"
  value     String   // e.g., "Large", "Red"
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([variantId])
  @@unique([variantId, name])
}

model PriceAlert {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId   String?
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  targetPrice Float
  type        AlertType
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([variantId])
}

enum Role {
  super_admin
  admin
  supplier
  general_contractor
  subcontractor
  user
  customer
}

enum OrderStatus {
  PENDING
  PROCESSING
  POOLING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  DRAFT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CAPTURED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CRYPTO
  OTHER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  MORE_INFO_NEEDED
}

enum BatchStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum AlertType {
  BELOW
  ABOVE
  PERCENTAGE_CHANGE
}

enum PoolStatus {
  OPEN
  COMPLETED
  CANCELLED
  EXPIRED
}
