generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  super_admin
  user
  GENERAL_CONTRACTOR
  SUBCONTRACTOR
  ADMIN
  SUPPLIER
}

enum OrderStatus {
  DRAFT
  PENDING
  PROCESSING
  POOLING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  CAPTURED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CRYPTO
  OTHER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  products  Product[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  inventory   Int
  supplierId  String
  supplier    User        @relation(fields: [supplierId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  items         OrderItem[]
  payment       Payment?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  poolGroupId   String?
  poolProgress  Float?
  poolDeadline  DateTime?
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ServiceConfig {
  id           String    @id @default(cuid())
  service      String    @unique
  config       Json
  lastVerified DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
} 